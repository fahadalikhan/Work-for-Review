#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'todo_version'
require 'right_aws' 
require 'right_http_connection'
require 'AWS'
require 'mysql2'

include GLI

program_desc 'testing gli'

version Todo::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe list here'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.desc 'Describe a switch to list'
  c.switch :s

  c.desc 'Describe a flag to list'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'Describe add here'
arg_name 'Describe arguments to add here'

command :add do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Describe complete here'
arg_name 'Describe arguments to complete here'
command :complete do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Check Running Instances'
command :get_instances do |c|
  c.action do |global_options,options,args|
    begin
      client = Mysql2::Client.new(:host => "localhost", :username => "root",:database => 'ec2',:password => 'password')
    @ec2   = RightAws::Ec2.new(Todo::ACCESS_KEY,Todo::SECRET_KEY)
    instances = @ec2.describe_instances
    instances.each do |instance|
      Todo::check_if_exists client,instance
    end
    rescue Exception => e
      puts 'exception = ' + e.message
      #system 'bundle exec todo create_domain'    
    end
    
          
  end
end

desc 'Check Utilisation Reports'
command :get_utilisation_report do |c|
  c.action do |global_options,options,args|
    # ec2   = RightAws::Ec2.new(Todo::ACCESS_KEY,Todo::SECRET_KEY)
    # instances = ec2.describe_instances
    cw = AWS::Cloudwatch::Base.new(:access_key_id => Todo::ACCESS_KEY, :secret_access_key => Todo::SECRET_KEY,:server => 'monitoring.us-east-1.amazonaws.com')
    puts cw.list_metrics
    # instances.each do |instance|
      metric = cw.get_metric_statistics(namespace: 'AWS/EC2', measure_name: 'CPUUtilization',  statistics: 'Average', start_time: Time.now, dimensions:"InstanceId='i-7b0b0c18'")
      puts metric.inspect.to_s    
  # end
  
end      
  
end

desc 'Get cost Reports ordered by owner'
command :get_cost_report do |c|
  c.action do |global_options,options,args|
    if args.length > 0
    client = Mysql2::Client.new(:host => "localhost", :username => "root",:database => 'ec2',:password => 'password')
    results = client.query("select * from costs where billing_owner = '#{args[0]}' || billing_group = '#{args[0]}'")
    puts 'Instance' +' ' +'Cost' +' '+ 'Owner'
    results.each do |result|
      puts result['instance_id'].to_s+' '+result['cost'].to_i.to_s+' '+result['billing_owner'].to_s
    end
  else
    puts "Please enter valid billing owner"
  end
end      
  
end


desc 'Create SDB Domain'
command :create_domain do |c|
  c.action do |global_options,options,args|
    puts 'in create domain'
  
end
end



pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)

